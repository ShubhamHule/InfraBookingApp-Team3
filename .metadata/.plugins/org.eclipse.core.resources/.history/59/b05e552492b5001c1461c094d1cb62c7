package com.zensar.booking.configuration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.zensar.booking.security.jwt.filter.JwtAuthenticationFilter;

@Configuration
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Autowired
	private UserDetailsService userDetailsService;// userDetailService is an interface given by spring security this
													// interface has only one method
	// loadUserByUserName(String userName)
	// this method is responsible for loading user object from database
	// If user object is not found this method should throw
	// userNameNotFoundException
	// It is responsibility of developer to give implementation to interface

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth
				/*
				 * .inMemoryAuthentication() .withUser("zensar")
				 * .password("$2a$10$KimiGQRtASr9hmxfHGBsLeNyiPP2ssMs8sWYimTEBitQooGIMTsvq")
				 * .roles("USER")
				 */
				.userDetailsService(userDetailsService).passwordEncoder(getPasswordEncoder());
	}

	// http status code 401 which specify that user is not passing right username
	// and password
	// http code 403(forbidden) -specify user is authenticated but not authorized to
	// this resource
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable().authorizeRequests()
				.antMatchers(/* HttpMethod.POST */ "/user/authenticate", "/token/validate").permitAll()
				.antMatchers(HttpMethod.OPTIONS, "/**").permitAll().anyRequest().authenticated().and()
				.addFilter(new JwtAuthenticationFilter(authenticationManager())).sessionManagement()
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS);// This is must for REST webservice
																		// RESt should be Stateless
	}

	@Bean
	@Override
	protected AuthenticationManager authenticationManager() throws Exception {
		// TODO Auto-generated method stub
		return super.authenticationManager();
	}

	@Bean
	public PasswordEncoder getPasswordEncoder() {
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		return passwordEncoder;
	}

}
